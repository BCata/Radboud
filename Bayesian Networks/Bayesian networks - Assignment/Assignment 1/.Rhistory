demo()
pwd
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
make
install.packages("devtools")
library(devtools)
install_github("jtextor/dagitty/r")
install.packages("Rcpp")
install_github("jtextor/dagitty/r")
set.seed(123)
# A utility function that converts log-odds to probabilities.
odds2p <- function(o) exp(o)/(exp(o)+1)
n <- 10000
# X does not depend on anything.
X <- rbinom(n,1,.5)
# X=1 increases the odds of U1=1 and M2=1.
U1 <- rbinom(n,1,odds2p(4*X-2))
M2 <- rbinom(n,1,odds2p(4*X-2))
# U1=1 increases the odds of M1=1.
M1 <- rbinom(n,1,odds2p(2*U1-1))
# U1=1 and M2=1 both increase the odds of Y=1.
Y <- rbinom(n,1,odds2p(2*U1+2*M2))
chisq.test( M1[X==0], M2[X==0] )
library
(dagitty)
g
<-
'
dag {
"Alcohol Use" -> { "Liver Function" "Uric Acid" Bilirubin Hypertension }
"C-Reactive Protein" -> Hypertension
"Liver Function" -> { "Serum Albumin" Bilirubin }
"Marital Status" -> { Education Income }
"Physical Activity" -> { "C-Reactive Protein" "Psychosocial Stress" Obesity }
"Psychosocial Stress" -> { Hypertension Obesity }
"Serum Albumin" -> { "C-Reactive Protein" Hypertension }
"Uric Acid" -> { "Liver Function" Hypertension }
Age -> { "Alcohol Use" "Marital Status" "Physical Activity"
"Psychosocial Stress" "Uric Acid" Bilirubin Hypertension Smoking }
Bilirubin -> Hypertension
Creatinine -> { Bilirubin Hypertension }
Diet -> Hypertension
Education -> { "Physical Activity" Bilirubin Hypertension Income Smoking }
Income -> { "Psychosocial Stress" Diet Obesity }
Obesity -> { Bilirubin Hypertension }
Smoking -> Bilirubin
}
'
# Plot the CPDAG of all equivalent networks
plot
( graphLayout( equivalenceClass( g ) ) )
# Count the equivalent networks
print
(
length
( equivalentDAGs( g ) ) )
library (dagitty)
g <-'dag {
"Alcohol Use" -> { "Liver Function" "Uric Acid" Bilirubin Hypertension }
"C-Reactive Protein" -> Hypertension
"Liver Function" -> { "Serum Albumin" Bilirubin }
"Marital Status" -> { Education Income }
"Physical Activity" -> { "C-Reactive Protein" "Psychosocial Stress" Obesity }
"Psychosocial Stress" -> { Hypertension Obesity }
"Serum Albumin" -> { "C-Reactive Protein" Hypertension }
"Uric Acid" -> { "Liver Function" Hypertension }
Age -> { "Alcohol Use" "Marital Status" "Physical Activity"
"Psychosocial Stress" "Uric Acid" Bilirubin Hypertension Smoking }
Bilirubin -> Hypertension
Creatinine -> { Bilirubin Hypertension }
Diet -> Hypertension
Education -> { "Physical Activity" Bilirubin Hypertension Income Smoking }
Income -> { "Psychosocial Stress" Diet Obesity }
Obesity -> { Bilirubin Hypertension }
Smoking -> Bilirubin
}'
# Plot the CPDAG of all equivalent networks
plot ( graphLayout( equivalenceClass( g ) ) )
# Count the equivalent networks
print( length ( equivalentDAGs( g ) ) )
library (dagitty)
g <-'dag {
"Alcohol Use" -> { "Liver Function" "Uric Acid" Bilirubin Hypertension }
"C-Reactive Protein" -> Hypertension
"Liver Function" -> { "Serum Albumin" Bilirubin }
"Marital Status" -> { Education Income }
"Physical Activity" -> { "C-Reactive Protein" "Psychosocial Stress" Obesity }
"Psychosocial Stress" -> { Hypertension Obesity }
"Serum Albumin" -> { "C-Reactive Protein" Hypertension }
"Uric Acid" -> { "Liver Function" Hypertension }
Age -> { "Alcohol Use" "Marital Status" "Physical Activity"
"Psychosocial Stress" "Uric Acid" Bilirubin Hypertension Smoking }
Bilirubin -> Hypertension
Creatinine -> { Bilirubin Hypertension }
Diet -> Hypertension
Education -> { "Physical Activity" Bilirubin Hypertension Income Smoking }
Income -> { "Psychosocial Stress" Diet Obesity }
Obesity -> { Bilirubin Hypertension }
Smoking -> Bilirubin
}'
# Plot the CPDAG of all equivalent networks
plot ( graphLayout( equivalenceClass( g ) ) )
> print( length ( equivalentDAGs( g ) ) )
library (dagitty)
g <-'dag {
"Alcohol Use" -> { "Liver Function" "Uric Acid" Bilirubin Hypertension }
"C-Reactive Protein" -> Hypertension
"Liver Function" -> { "Serum Albumin" Bilirubin }
"Marital Status" -> { Education Income }
"Physical Activity" -> { "C-Reactive Protein" "Psychosocial Stress" Obesity }
"Psychosocial Stress" -> { Hypertension Obesity }
"Serum Albumin" -> { "C-Reactive Protein" Hypertension }
"Uric Acid" -> { "Liver Function" Hypertension }
Age -> { "Alcohol Use" "Marital Status" "Physical Activity"
"Psychosocial Stress" "Uric Acid" Bilirubin Hypertension Smoking }
Bilirubin -> Hypertension
Creatinine -> { Bilirubin Hypertension }
Diet -> Hypertension
Education -> { "Physical Activity" Bilirubin Hypertension Income Smoking }
Income -> { "Psychosocial Stress" Diet Obesity }
Obesity -> { Bilirubin Hypertension }
Smoking -> Bilirubin
}'
# Plot the CPDAG of all equivalent networks
plot ( graphLayout( equivalenceClass( g ) ) )
# Count the equivalent networks
print( length ( equivalentDAGs( g ) ) )
script
script
Rscript script.R
plot ( graphLayout( equivalenceClass( g ) ) )
plot ( graphLayout( equivalenceClass( g ) ) )
g <- 'dag{
g <- 'dag{
library (dagitty)
g <- 'dag{
g <- 'dag{
g <- 'dag{
g <- 'dag{
library (dagitty)
library (dagitty)
"Bullied" -> {"Depesion" "Fight" "Unsecure" "Depresion"}
"Bullied" -> {"Depesion" "Fight" "Unsecure"}
"Race" -> {"Fight" "Grades" "Bullied"}
Bullied
"Sex" -> {"Weapon" "Grades" "Fight"}
"Sex" -> {"Weapon" "Grades" "Fight"}
"Weapon" -> {}
"Weapon" ->
"Sex" -> {"Weapon" "Grades" "Fight"}
"Sex" -> {"Weapon" "Grades" "Fight"}
Fight -> {Grades Weapon}
g <- 'dag {
print( Hola )
print( Hola )
print( Hola )
print( Hola )
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
View(r)
source('C:/Users/Alejandro/Desktop/script.R')
source('C:/Users/Alejandro/Desktop/script.R')
View(r)
bnlearn
install.packages("bnlearn")
data(learning.test)
# load the data and build the correct network from the model string.
data(alarm)
res = empty.graph(names(alarm))
modelstring(res) = paste("[HIST|LVF][CVP|LVV][PCWP|LVV][HYP][LVV|HYP:LVF]",
"[LVF][STKV|HYP:LVF][ERLO][HRBP|ERLO:HR][HREK|ERCA:HR][ERCA]",
"[HRSA|ERCA:HR][ANES][APL][TPR|APL][ECO2|ACO2:VLNG][KINK]",
"[MINV|INT:VLNG][FIO2][PVS|FIO2:VALV][SAO2|PVS:SHNT][PAP|PMB][PMB]",
"[SHNT|INT:PMB][INT][PRSS|INT:KINK:VTUB][DISC][MVS][VMCH|MVS]",
"[VTUB|DISC:VMCH][VLNG|INT:KINK:VTUB][VALV|INT:VLNG][ACO2|VALV]",
"[CCHL|ACO2:ANES:SAO2:TPR][HR|CCHL][CO|HR:STKV][BP|CO:TPR]", sep = "")
## Not run:
# there are too many nodes for plot(), use graphviz.plot().
graphviz.plot(res)
## End(Not run)
library (bnlearn)
adj["A", "C"] = 1L
adj["", ""] = 1L
adj["", ""] = 1Ladj
adj["", ""] = 1L
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
## End(Not run)
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
View(adj)
View(adj)
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
View(coronary)
source('C:/Users/Alejandro/Desktop/script2.R')
View(d)
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
View(coronary)
View(d)
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
View(d)
View(coronary)
View(coronary)
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
View(coronary)
debugSource('C:/Users/Alejandro/Desktop/script2.R')
View(bn_df)
bn_df <- data.frame(coronary)
View(bn_df)
View(bn_df)
View(bn_df)
source('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
View(d)
View(d)
debugSource('C:/Users/Alejandro/Desktop/script2.R')
View(d)
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
View(d)
debugSource('C:/Users/Alejandro/Desktop/script2.R')
View(coronary)
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
View(bn_df)
source('C:/Users/Alejandro/Desktop/script2.R')
View(coronary)
View(coronary)
source('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
debugSource('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Desktop/script2.R')
source('C:/Users/Alejandro/Dropbox/Bayesian networks - Assignment/Assignment 1/BN_As1_Weapons.R')
source('C:/Users/Alejandro/Dropbox/Bayesian networks - Assignment/Assignment 1/networkTesting.R', encoding = 'UTF-8')
